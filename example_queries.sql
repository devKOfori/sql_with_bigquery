-- Retrieve a list of all books along with their authors
SELECT
    books.title AS book_title,
    authors.first_name || ' ' || authors.last_name AS author_name
FROM
    books
JOIN
    authors ON books.author_id = authors.author_id;
	
	
-- Find the total sales for a specific book
SELECT
    books.title AS book_title,
    SUM(order_items.subtotal) AS total_sales
FROM
    books
JOIN
    order_items ON books.book_id = order_items.book_id
GROUP BY
    books.title;
	
	
-- List customers who have placed the most orders
SELECT
    customers.first_name || ' ' || customers.last_name AS customer_name,
    COUNT(orders.order_id) AS order_count
FROM
    customers
JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY
    customers.customer_id
ORDER BY
    order_count DESC;
	

-- Identify books that are out of stock
SELECT
    title AS book_title
FROM
    books
WHERE
    stock_quantity = 0;
	

-- Display the top-selling authors based on the number of books sold
SELECT
    authors.first_name || ' ' || authors.last_name AS author_name,
    COUNT(order_items.order_item_id) AS books_sold
FROM
    authors
JOIN
    books ON authors.author_id = books.author_id
JOIN
    order_items ON books.book_id = order_items.book_id
GROUP BY
    authors.author_id
ORDER BY
    books_sold DESC;
	

-- Retrieve all orders along with the customer information
SELECT
    orders.order_id,
    customers.first_name || ' ' || customers.last_name AS customer_name,
    orders.order_date,
    orders.total_amount,
    orders.status
FROM
    orders
JOIN
    customers ON orders.customer_id = customers.customer_id;
	
	
-- Find the average price of books in each genre
SELECT
    genre,
    AVG(price) AS average_price
FROM
    books
GROUP BY
    genre;


-- List books that have been ordered more than 5 times
SELECT
    books.title AS book_title,
    COUNT(order_items.order_item_id) AS order_count
FROM
    books
JOIN
    order_items ON books.book_id = order_items.book_id
GROUP BY
    books.book_id
HAVING
    COUNT(order_items.order_item_id) > 5;


-- Identify customers who have not placed any orders
SELECT
    customers.first_name || ' ' || customers.last_name AS customer_name
FROM
    customers
LEFT JOIN
    orders ON customers.customer_id = orders.customer_id
WHERE
    orders.order_id IS NULL;
	

-- Display the total revenue generated by the bookstore
SELECT
    SUM(order_items.subtotal) AS total_revenue
FROM
    order_items;






